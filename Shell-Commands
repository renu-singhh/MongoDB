------------------Why we use mongoDB------------------------------------------------------------
Schema-less Database: No predefined schema required, allowing flexible document structures.
Document-Oriented Storage: Stores data in JSON-like BSON documents, supporting nested structures and arrays.
Indexing: Supports various indexes (single field, compound, multikey, text, geospatial) for optimized query performance.
Replication: Provides high availability through replica sets with redundancy and automated failover.
Sharding: Enables horizontal scalability by distributing data across multiple servers or clusters.
......................................................................................................................................................
findOne---Returns the first document that matches the query or null if no document matches.
findmany----Returns a cursor to the documents that match the query. You can iterate over the cursor to access each document.

  =====================......    LETS BEGIN   ....=========================================

1st command -----
show dbs
Database        12.00 KiB
Database60      60.00 KiB
admin           40.00 KiB
config         108.00 KiB
local           80.00 KiB
mongopractice   72.00 KiB
mongopratice    72.00 KiB
2nd command ----------
use admin
switched to db admin
db.createCollection("students")
{ ok: 1 }
db.students.insertOne({name:"RenuSingh",age:21,course:"btech"})
{
  acknowledged: true,
  insertedId: ObjectId('66b34f0f6e47c23664014008')
}
db.students.find()
{
  _id: ObjectId('66b34f0f6e47c23664014008'),
  name: 'RenuSingh',
  age: 21,
  course: 'btech'
}
db.students.insertMany([{name:"RenuSingh",age:21,course:"btech"},{name:"Renuuu",age:91,course:"mca"},{name:"Singh",age:291,course:"cse"}])
{
  _id: ObjectId('66b34f0f6e47c23664014008'),
  name: 'RenuSingh',
  age: 21,
  course: 'btech'
}
{
  _id: ObjectId('66b34fa76e47c23664014009'),
  name: 'RenuSingh',
  age: 21,
  course: 'btech'
}
{
  _id: ObjectId('66b34fa76e47c2366401400a'),
  name: 'Renuuu',
  age: 91,
  course: 'mca'
}
{
  _id: ObjectId('66b34fa76e47c2366401400b'),
  name: 'Singh',
  age: 291,
  course: 'cse'
}
-----------sorting   1:asending order   -1:decending order-------------------------------------------
db.students.find().sort({name:1})
{
  _id: ObjectId('66b34f0f6e47c23664014008'),
  name: 'RenuSingh',
  age: 21,
  course: 'btech'
}
{
  _id: ObjectId('66b34fa76e47c23664014009'),
  name: 'RenuSingh',
  age: 21,
  course: 'btech'
}
{
  _id: ObjectId('66b34fa76e47c2366401400a'),
  name: 'Renuuu',
  age: 91,
  course: 'mca'
}
{
  _id: ObjectId('66b34fa76e47c2366401400b'),
  name: 'Singh',
  age: 291,
  course: 'cse'
}
-----------db.students.find().sort({name:-1})--------------------------------

{
  _id: ObjectId('66b34fa76e47c2366401400b'),
  name: 'Singh',
  age: 291,
  course: 'cse'
}
{
  _id: ObjectId('66b34fa76e47c2366401400a'),
  name: 'Renuuu',
  age: 91,
  course: 'mca'
}
{
  _id: ObjectId('66b34f0f6e47c23664014008'),
  name: 'RenuSingh',
  age: 21,
  course: 'btech'
}
{
  _id: ObjectId('66b34fa76e47c23664014009'),
  name: 'RenuSingh',
  age: 21,
  course: 'btech'
}
----------------LIMIT----------------------------------------
 Get the no. of documents you would like to return as the documents

db.students.find().limit(1)
{
  _id: ObjectId('66b34f0f6e47c23664014008'),
  name: 'RenuSingh',
  age: 21,
  course: 'btech'
}
------------COMBINE SORT AND LIMIT--------------
db.students.find().sort({age:1})
{
  _id: ObjectId('66b34f0f6e47c23664014008'),
  name: 'RenuSingh',
  age: 21,
  course: 'btech'
}
{
  _id: ObjectId('66b34fa76e47c23664014009'),
  name: 'RenuSingh',
  age: 21,
  course: 'btech'
}
{
  _id: ObjectId('66b34fa76e47c2366401400a'),
  name: 'Renuuu',
  age: 91,
  course: 'mca'
}
db.students.find().sort({course:-1})
{
  _id: ObjectId('66b34fa76e47c2366401400a'),
  name: 'Renuuu',
  age: 91,
  course: 'mca'
}
{
  _id: ObjectId('66b34f0f6e47c23664014008'),
  name: 'RenuSingh',
  age: 21,
  course: 'btech'
}
{
  _id: ObjectId('66b34f0f6e47c23664014008'),
  name: 'RenuSingh',
  age: 21,
  course: 'btech'
}

db.students.find().sort({age:-1}).limit(1)

{
  _id: ObjectId('66b34fa76e47c2366401400b'),
  name: 'Singh',
  age: 291,
  course: 'cse'
}
------------------PASSING ARGUMENTS IN FIND METHOD------------------------------
.find({query},{projection})
query parameter is very similar to where clause in SQL 
  projection:return the colums that has been specified  --> used as a select clause

db.students.find({},{name:true})
{
  _id: ObjectId('66b34f0f6e47c23664014008'),
  name: 'RenuSingh'
}
{
  _id: ObjectId('66b34fa76e47c23664014009'),
  name: 'RenuSingh'
}
{
  _id: ObjectId('66b34fa76e47c2366401400a'),
  name: 'Renuuu'
}
{
  _id: ObjectId('66b34fa76e47c2366401400b'),
  name: 'Singh'
}
-----------------filterOne(filter,update)---------
db.students.updateOne({name:"Renuuu"},{$set:{name:"Rashmii"}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
db.students.find({name:"Rashmii"})
{
  _id: ObjectId('66b34fa76e47c2366401400a'),
  name: 'Rashmii',
  age: 91,
  course: 'mca'
}
db.students.updateMany({},{$set:{name:"Rashmii"}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 4,
  modifiedCount: 3,
  upsertedCount: 0
}
db.students.find()
{
  _id: ObjectId('66b34f0f6e47c23664014008'),
  name: 'Rashmii',
  age: 21,
  course: 'btech'
}
{
  _id: ObjectId('66b34fa76e47c23664014009'),
  name: 'Rashmii',
  age: 21,
  course: 'btech'
}
{
  _id: ObjectId('66b34fa76e47c2366401400a'),
  name: 'Rashmii',
  age: 91,
  course: 'mca'
}
{
  _id: ObjectId('66b34fa76e47c2366401400b'),
  name: 'Rashmii',
  age: 291,
  course: 'cse'
}

db.students.updateOne({name:"Rashmii"},{$unset:{age:""}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
db.students.find()
{
  _id: ObjectId('66b34f0f6e47c23664014008'),
  name: 'Rashmii',
  course: 'btech'
}
{
  _id: ObjectId('66b34fa76e47c23664014009'),
  name: 'Rashmii',
  age: 21,
  course: 'btech'
}
{
  _id: ObjectId('66b34fa76e47c2366401400a'),
  name: 'Rashmii',
  age: 91,
  course: 'mca'
}
db.students.deleteOne({age:291})
{
  acknowledged: true,
  deletedCount: 1
}
---------------comprasion  query operator--------------------
$ne is not equal to
$lt less then 
$lte less then equal to
$gte greater then equal to 
The $in operator selects the documents where the value of a field equals any value in the specified array.
$nin selects the documents where:
the specified field value is not in the specified array or the specified field does not exist.

  
db.students.find({age:{$ne:91}})
{
  _id: ObjectId('66b34f0f6e47c23664014008'),
  name: 'Rashmii',
  course: 'btech'
}
{
  _id: ObjectId('66b34fa76e47c23664014009'),
  name: 'Rashmii',
  age: 21,
  course: 'btech'
}
db.students.find({age:{$gte:21,$lte:91}})
{
  _id: ObjectId('66b34fa76e47c23664014009'),
  name: 'Rashmii',
  age: 21,
  course: 'btech'
}
{
  _id: ObjectId('66b34fa76e47c2366401400a'),
  name: 'Rashmii',
  age: 91,
  course: 'mca'
}

------------------------Logical query operation-----------------
return the true or false $and $not $nor $or

db.students.find({$and:[{name:true},{age:{$lte:21}}]})
db.students.find({$or:[{name:true},{age:{$lte:21}}]})
{
  _id: ObjectId('66b34fa76e47c23664014009'),
  name: 'Rashmii',
  age: 21,
  course: 'btech'
}
db.students.find({$nor:[{name:true},{age:{$lte:21}}]})
{
  _id: ObjectId('66b34f0f6e47c23664014008'),
  name: 'Rashmii',
  course: 'btech'
}
{
  _id: ObjectId('66b34fa76e47c2366401400a'),
  name: 'Rashmii',
  age: 91,
  course: 'mca'
}
db.students.find({age:{$not:{$gte:21}}})
{
  _id: ObjectId('66b34f0f6e47c23664014008'),
  name: 'Rashmii',
  course: 'btech'
}
---------------INDEX------------
Indexes support efficient execution of queries in MongoDB. Without indexes, MongoDB must scan every document in a collection to return query results.
B-tree is a self-balancing tree data structure that maintains sorted data and allows searches, sequential access, insertions, and deletions in logarithmic time.
most basic difference between a B-Tree and a Binary Tree is that a B-Tree is used for data storage on a disk, whereas a Binary Tree is used for data storage in RAM.
db.students.find({name:"Rashmii"}).explain("executionStats")
{
  explainVersion: '1',
  queryPlanner: {
    namespace: 'admin.students',
    indexFilterSet: false,
    parsedQuery: {
      name: {
        '$eq': 'Rashmii'
      }
    },
    queryHash: 'A2F868FD',
    planCacheKey: 'A2F868FD',
    maxIndexedOrSolutionsReached: false,
    maxIndexedAndSolutionsReached: false,
    maxScansToExplodeReached: false,
    winningPlan: {
      stage: 'COLLSCAN',
      filter: {
        name: {
          '$eq': 'Rashmii'
        }
      },
      direction: 'forward'
    },
    rejectedPlans: []
  },
  executionStats: {
    executionSuccess: true,
    nReturned: 3,
    executionTimeMillis: 2,
    totalKeysExamined: 0,
    totalDocsExamined: 3,
    executionStages: {
      stage: 'COLLSCAN',
      filter: {
        name: {
          '$eq': 'Rashmii'
        }
      },
      nReturned: 3,
      executionTimeMillisEstimate: 0,
      works: 4,
      advanced: 3,
      needTime: 0,
      needYield: 0,
      saveState: 0,
      restoreState: 0,
      isEOF: 1,
      direction: 'forward',
      docsExamined: 3
    }
  },
  command: {
    find: 'students',
    filter: {
      name: 'Rashmii'
    },
    '$db': 'admin'
  },
  serverInfo: {
    host: 'LAPTOP-5GF91U0M',
    port: 27017,
    version: '7.0.7',
    gitVersion: 'cfb08e1ab7ef741b4abdd0638351b322514c45bd'
  },
  serverParameters: {
    internalQueryFacetBufferSizeBytes: 104857600,
    internalQueryFacetMaxOutputDocSizeBytes: 104857600,
    internalLookupStageIntermediateDocumentMaxSizeBytes: 104857600,
    internalDocumentSourceGroupMaxMemoryBytes: 104857600,
    internalQueryMaxBlockingSortMemoryUsageBytes: 104857600,
    internalQueryProhibitBlockingMergeOnMongoS: 0,
    internalQueryMaxAddToSetBytes: 104857600,
    internalDocumentSourceSetWindowFieldsMaxMemoryBytes: 104857600,
    internalQueryFrameworkControl: 'trySbeRestricted'
  },
  ok: 1
}
db.students.createIndex({name:1})
name_1
db.students.find({name:"Rashmii"})
  {
  _id: ObjectId('66b34f0f6e47c23664014008'),
  name: 'Rashmii',
  course: 'btech'
}

  _id: ObjectId('66b34fa76e47c23664014009'),
  name: 'Rashmii',
  age: 21,
  course: 'btech'
}
{
  _id: ObjectId('66b34fa76e47c2366401400a'),
  name: 'Rashmii',
  age: 91,
  course: 'mca'
}
........................................................................
db.students.getIndexes()
[
  { v: 2, key: { _id: 1 }, name: '_id_' },
  { v: 2, key: { name: 1 }, name: 'name_1' }
]
db.students.dropIndex("name_1")
{ nIndexesWas: 2, ok: 1 }
----------------Collection------------------------------------------------
show collections
students

db.createCollection("teachers")
{ ok: 1 }
show collections
students
teachers

db.teachers.drop()
true
